"use strict";(self.webpackChunk_gemeente_denhaag_storybook=self.webpackChunk_gemeente_denhaag_storybook||[]).push([[9293],{"./src/react/Tabs.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,UpdateTabContent:()=>UpdateTabContent,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Tabs_stories});var mjs=__webpack_require__("../../components/Tab/dist/mjs/index.js");var react=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const Tabs_stories={id:"react-navigation-tabs",title:"React/Navigation/Tabs",component:mjs.tU,args:{tabData:[{label:"A tab",panelContent:"Item One"},{label:"Another tab",panelContent:"Item Two"},{label:"Yet another tab",panelContent:"Item Three"}]},tags:["autodocs"],parameters:{docs:{description:{component:"# Tabs\n\nTabs organise and allow users to move between content without having to navigate away from a page.\n\n## When to use\n\nUse tabs when you are organisazing related content in a single cointainer or need to flip between multiple panes or sections. It’s a way to group content, connect related information, and is used as a tool to save space.\n\n## Alternatives and related components\n\nUse anchor navigation on longer pages with multiple sub-headings when you don’t group the content into groups.\n\n## Anatomy\n\nTabs consists of:\n\n1. Label: describes the content contained within it.\n2. Line: this line shows the state of a tab\n3. Trailing icon: this icon shows that it is possible to view all tabs that are not visible on the screen\n4. Container\n\n## (Interactive) states\n\nTabs contains the states active, inactive, hover, disabled and focus.\n\n## Design properties\n\n### Typography\n\n- Label inactive: TheSans/md/400\n- Label active: TheSans/md/700\n\n### Color\n\n- Label inactive: text color Grey/4\n- Label active: text color Blue/3\n- Line inactive: fill color Grey/2\n- Line active: fill color Blue/3\n\n### Interactive states\n\n- Hover inactive: label color Blue/3, line color Grey/2\n- Disabled: label color Grey/2, line color Grey/2\n- Focus: border color Ocher/5, line color Grey/2\n\n### Structure\n\n- Label: padding-top and padding bottom 8px, padding-left and padding-right 16px\n- Line: width 2px, padding-top 8px\n- Trailing icon: size 16px, padding-left 4px\n\n#### Mobile\n\n- Label (and trailing icon): centered\n\n## Accessibility\n\n- Tab, shift + tab - to move focus between tabs.\n- Space or Enter - to display the selected tab's content\n\n## Content guidelines\n\nOrder the tabs by priority or importance from left to right\n\n### Labels\n\n- Each tab label needs to describe the content contained within it.\n- Keep tab labels short and meaningful. Between 1-2 words is best and written in plain language. Keep in mind that at mobile widths and during translation, the character length of a label will impact the experience.\n- Ensure that each tab label is unique.\n- Do not use icons in tab labels.\n- Tab labels shouldn't be longer than one or two words and be accurate in their description.\n- Tab labels should also make sense when read in isolation.\n- Never truncate tab labels. If a label overruns the container, find a shorter alternative.\n- Do use title case for tab labels.\n\n## Best practices\n\n### Dos\n\nTabs should:\n\n- As a default, there must always be one tab that's already selected and the content panel below it must be visible.\n- Always be placed above the content it relates to.\n- Have a minimum number of 2 tabs.\n- Only one content panel can be shown at a time.\n- Have the same font size for the label text of each tab\n- Have one line of text for labels.\n- Have an order that should be consistent across an experience. Tabs with related content should be grouped adjacent to each other.\n\n### Don’ts\n\nTabs should:\n\n- Not be putted underneath the content it relates to.\n- The order of the tabs from left to right should never change. Only the content panel should change.\n- Not use two lines of text for labels.\n- Not use no more than six tabs in most scenarios. This maintains an uncluttered UI and reduces cognitive load for users.\n- Not be used for primary navigation.\n\n### Behavior\n\n- The first tab section is selected by default\n- Only one tab can be selected at a time\n- Currently selected tab is always highlighted\n- Tabs are scrollable by default and do not wrap to a second line\n\n## References\n\n[https://www.bbc.co.uk/gel/guidelines/tabs](https://www.bbc.co.uk/gel/guidelines/tabs)\n[https://www.carbondesignsystem.com/components/tabs/usage](https://www.carbondesignsystem.com/components/tabs/usage)\n[https://www.freshconsulting.com/insights/blog/uiux-principle-21-when-and-when-not-to-use-tabs/](https://www.freshconsulting.com/insights/blog/uiux-principle-21-when-and-when-not-to-use-tabs/)\n"}}}},Default={},UpdateTabContent={render:()=>{const[seconds,setSeconds]=(0,react.useState)(1);return(0,react.useEffect)((()=>{const interval=setInterval((()=>{setSeconds((seconds=>seconds+1))}),1e3);return()=>clearInterval(interval)}),[]),(0,jsx_runtime.jsx)(mjs.tU,{tabData:[{label:"A tab with timer",panelContent:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:["Update timer: ",seconds]})},{label:"Another tab",panelContent:"Item Two"},{label:"Yet another tab",panelContent:"Item Three"}]})}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{}",...Default.parameters?.docs?.source}}},UpdateTabContent.parameters={...UpdateTabContent.parameters,docs:{...UpdateTabContent.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [seconds, setSeconds] = useState(1);\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setSeconds((seconds: number) => seconds + 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }, []);\n    return <Tabs tabData={[{\n      label: 'A tab with timer',\n      panelContent: <>Update timer: {seconds}</>\n    }, {\n      label: 'Another tab',\n      panelContent: 'Item Two'\n    }, {\n      label: 'Yet another tab',\n      panelContent: 'Item Three'\n    }]} />;\n  }\n}",...UpdateTabContent.parameters?.docs?.source}}};const __namedExportsOrder=["Default","UpdateTabContent"]}}]);